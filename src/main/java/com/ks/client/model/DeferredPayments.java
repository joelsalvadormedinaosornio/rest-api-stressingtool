/*
 * KM Router
 * Allows processing of different types of transactions
 *
 * OpenAPI spec version: 2.0.0.0
 * Contact: atencionclientes@kssoluciones.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ks.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * DeferredPayments
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-03T18:10:54.088Z")
public class DeferredPayments {
  /**
   * &#39;Type promotion&#39; Sort order:   * &#39;00&#39; - No plan   * &#39;03&#39; - 0% interest   * &#39;05&#39; - Plan with interest   * &#39;07&#39; - Skip payment plan 
   */
  @JsonAdapter(CreditPlanEnum.Adapter.class)
  public enum CreditPlanEnum {
    _00("00"),
    
    _03("03"),
    
    _05("05"),
    
    _07("07");

    private String value;

    CreditPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditPlanEnum fromValue(String text) {
      for (CreditPlanEnum b : CreditPlanEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CreditPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreditPlanEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("credit_plan")
  private CreditPlanEnum creditPlan = null;

  @SerializedName("credit_term")
  private String creditTerm = null;

  @SerializedName("months_skipped")
  private String monthsSkipped = null;

  public DeferredPayments creditPlan(CreditPlanEnum creditPlan) {
    this.creditPlan = creditPlan;
    return this;
  }

   /**
   * &#39;Type promotion&#39; Sort order:   * &#39;00&#39; - No plan   * &#39;03&#39; - 0% interest   * &#39;05&#39; - Plan with interest   * &#39;07&#39; - Skip payment plan 
   * @return creditPlan
  **/
  @ApiModelProperty(example = "05", value = "'Type promotion' Sort order:   * '00' - No plan   * '03' - 0% interest   * '05' - Plan with interest   * '07' - Skip payment plan ")
  public CreditPlanEnum getCreditPlan() {
    return creditPlan;
  }

  public void setCreditPlan(CreditPlanEnum creditPlan) {
    this.creditPlan = creditPlan;
  }

  public DeferredPayments creditTerm(String creditTerm) {
    this.creditTerm = creditTerm;
    return this;
  }

   /**
   * Get creditTerm
   * @return creditTerm
  **/
  @ApiModelProperty(example = "06", value = "")
  public String getCreditTerm() {
    return creditTerm;
  }

  public void setCreditTerm(String creditTerm) {
    this.creditTerm = creditTerm;
  }

  public DeferredPayments monthsSkipped(String monthsSkipped) {
    this.monthsSkipped = monthsSkipped;
    return this;
  }

   /**
   * Get monthsSkipped
   * @return monthsSkipped
  **/
  @ApiModelProperty(example = "03", value = "")
  public String getMonthsSkipped() {
    return monthsSkipped;
  }

  public void setMonthsSkipped(String monthsSkipped) {
    this.monthsSkipped = monthsSkipped;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeferredPayments deferredPayments = (DeferredPayments) o;
    return Objects.equals(this.creditPlan, deferredPayments.creditPlan) &&
        Objects.equals(this.creditTerm, deferredPayments.creditTerm) &&
        Objects.equals(this.monthsSkipped, deferredPayments.monthsSkipped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditPlan, creditTerm, monthsSkipped);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeferredPayments {\n");

    sb.append("    creditPlan: ").append(toIndentedString(creditPlan)).append("\n");
    sb.append("    creditTerm: ").append(toIndentedString(creditTerm)).append("\n");
    sb.append("    monthsSkipped: ").append(toIndentedString(monthsSkipped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

