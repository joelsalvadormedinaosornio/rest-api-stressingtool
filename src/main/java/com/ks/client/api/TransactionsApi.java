/*
 * KM Router
 * Allows processing of different types of transactions
 *
 * OpenAPI spec version: 2.0.0.0
 * Contact: atencionclientes@kssoluciones.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ks.client.api;

import com.google.gson.reflect.TypeToken;
import com.ks.client.*;
import com.ks.client.model.TransactionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi
{
    private ApiClient apiClient;

    public TransactionsApi(ApiClient apiClient)
    {
        this.apiClient = apiClient;
    }

    /**
     * Build call for genericPost
     *
     * @param transactionDetail       Detail of the transaction process (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genericPostCall(TransactionRequest transactionDetail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, String basePath) throws ApiException
    {
        Object localVarPostBody = transactionDetail;

        // create path and map variables
        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
        {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null)
        {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(basePath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genericPostValidateBeforeCall(TransactionRequest transactionDetail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, String basePath) throws ApiException
    {


        com.squareup.okhttp.Call call = genericPostCall(transactionDetail, progressListener, progressRequestListener, basePath);
        return call;


    }

    /**
     * The service allows el send transaction to banks
     * Allows process transactions with Eglobal, Prosa, Amex, etc...
     *
     * @param transactionDetail Detail of the transaction process (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object genericPost(TransactionRequest transactionDetail, String basePath) throws ApiException
    {
        ApiResponse<Object> resp = genericPostWithHttpInfo(transactionDetail, basePath);
        return resp.getData();
    }

    /**
     * The service allows el send transaction to banks
     * Allows process transactions with Eglobal, Prosa, Amex, etc...
     *
     * @param transactionDetail Detail of the transaction process (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> genericPostWithHttpInfo(TransactionRequest transactionDetail, String basePath) throws ApiException
    {
        com.squareup.okhttp.Call call = genericPostValidateBeforeCall(transactionDetail, null, null, basePath);
        Type localVarReturnType = new TypeToken<Object>()
        {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }
}
